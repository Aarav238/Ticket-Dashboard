# ============================================
# Ticket Dashboard Backend - Environment Variables
# ============================================
# Copy this file to .env and fill in your actual values
# DO NOT commit the .env file to version control

# ============================================
# Server Configuration
# ============================================
PORT=5000
NODE_ENV=development

# ============================================
# Database Configuration (Supabase PostgreSQL)
# ============================================
# Get this from your Supabase project settings:
# Project Settings > Database > Connection String > URI
# Example: postgresql://postgres:[YOUR-PASSWORD]@db.xxxxxxxxxxxx.supabase.co:5432/postgres
DATABASE_URL=postgresql://postgres:aaravShukla@db.rbuwkdrnlfbrqvpdksyz.supabase.co:5432/postgres

# ============================================
# JWT Configuration
# ============================================
# Generate a secure random string (min 32 characters)
# You can use: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=260810d19b7a3e6422db77a2537daa83c4440320d9ebc1bf9121e9357cae5f91

# Token expiration time
# Examples: '7d' (7 days), '24h' (24 hours), '60m' (60 minutes)
JWT_EXPIRES_IN=7d

# ============================================
# Email Configuration (SMTP)
# ============================================
# For Gmail:
# 1. Enable 2-Factor Authentication in your Google Account
# 2. Go to: https://myaccount.google.com/apppasswords
# 3. Generate an App Password for "Mail"
# 4. Use the 16-character password below

SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-gmail-app-password

# Email sender information
SMTP_FROM=Ticket Dashboard <your-email@gmail.com>

# Alternative SMTP Providers:
# ─────────────────────────────
# SendGrid:
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USER=apikey
# SMTP_PASSWORD=your-sendgrid-api-key
#
# Mailgun:
# SMTP_HOST=smtp.mailgun.org
# SMTP_PORT=587
# SMTP_USER=postmaster@your-domain.mailgun.org
# SMTP_PASSWORD=your-mailgun-password
#
# AWS SES:
# SMTP_HOST=email-smtp.us-east-1.amazonaws.com
# SMTP_PORT=587
# SMTP_USER=your-aws-access-key-id
# SMTP_PASSWORD=your-aws-secret-access-key

# ============================================
# Super User Configuration
# ============================================
# Password required to enable super-user mode
# This allows viewing user information in the UI
SUPER_USER_PASSWORD=admin123

# ============================================
# Frontend Configuration (CORS)
# ============================================
# URL of your frontend application
# Development: http://localhost:3000
# Production: https://your-app.vercel.app
CLIENT_URL=http://localhost:3000

# ============================================
# Socket.io Configuration
# ============================================
# Same as CLIENT_URL (for WebSocket CORS)
SOCKET_CORS_ORIGIN=http://localhost:3000

# ============================================
# Optional: Production Settings
# ============================================
# Uncomment and configure for production deployment

# Database connection pool settings (optional)
# DB_POOL_MAX=20
# DB_POOL_IDLE_TIMEOUT=30000
# DB_POOL_CONNECTION_TIMEOUT=2000

# Rate limiting (if implemented)
# RATE_LIMIT_WINDOW_MS=900000
# RATE_LIMIT_MAX_REQUESTS=100

# Logging level
# LOG_LEVEL=info

# ============================================
# Development Notes
# ============================================
# 1. Never commit .env to version control
# 2. Keep .env.example up to date
# 3. Generate strong random secrets for production
# 4. Use different secrets for dev/staging/production
# 5. Rotate secrets periodically

# ============================================
# Security Checklist
# ============================================
# ✓ JWT_SECRET is at least 32 characters
# ✓ SUPER_USER_PASSWORD is strong (not 'admin123')
# ✓ Database password is strong
# ✓ SMTP credentials are secure (use app passwords)
# ✓ CLIENT_URL matches your actual frontend URL
# ✓ NODE_ENV is set to 'production' in production

# ============================================
# Quick Start Commands
# ============================================
# 1. Copy this file: cp .env.example .env
# 2. Edit .env with your actual values
# 3. Install dependencies: npm install
# 4. Run database schema: (in Supabase SQL Editor)
# 5. Start server: npm run dev
# 6. Test health endpoint: curl http://localhost:5000/health
